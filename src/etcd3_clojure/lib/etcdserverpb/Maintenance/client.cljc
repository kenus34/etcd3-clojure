;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC etcdserverpb.Maintenance Client Implementation
;;;----------------------------------------------------------------------------------
(ns etcd3-clojure.lib.etcdserverpb.Maintenance.client
  (:require [etcd3-clojure.lib.etcdserverpb :refer :all]
            [etcd3-clojure.lib.authpb :as authpb]
            [etcd3-clojure.lib.mvccpb :as mvccpb]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn Alarm
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "Alarm"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-AlarmRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->AlarmResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Status
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "Status"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-StatusRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->StatusResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Defragment
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "Defragment"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-DefragmentRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->DefragmentResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Hash
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "Hash"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-HashRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->HashResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn HashKV
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "HashKV"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-HashKVRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->HashKVResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Snapshot
  [client params reply]
  (let [input (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "Snapshot"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-SnapshotRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->SnapshotResponse :ch reply}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc))))))

(defn MoveLeader
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Maintenance"
              :method  "MoveLeader"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-MoveLeaderRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->MoveLeaderResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

