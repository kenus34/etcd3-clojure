;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC etcdserverpb.KV Client Implementation
;;;----------------------------------------------------------------------------------
(ns etcd3-clojure.lib.etcdserverpb.KV.client
  (:require [etcd3-clojure.lib.etcdserverpb :refer :all]
            [etcd3-clojure.lib.authpb :as authpb]
            [etcd3-clojure.lib.mvccpb :as mvccpb]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn Range
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.KV"
              :method  "Range"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-RangeRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->RangeResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Put
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.KV"
              :method  "Put"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-PutRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->PutResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn DeleteRange
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.KV"
              :method  "DeleteRange"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-DeleteRangeRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->DeleteRangeResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Txn
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.KV"
              :method  "Txn"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-TxnRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->TxnResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Compact
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.KV"
              :method  "Compact"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-CompactionRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->CompactionResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

