;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC etcdserverpb.Cluster Client Implementation
;;;----------------------------------------------------------------------------------
(ns etcd3-clojure.lib.etcdserverpb.Cluster.client
  (:require [etcd3-clojure.lib.etcdserverpb :refer :all]
            [etcd3-clojure.lib.authpb :as authpb]
            [etcd3-clojure.lib.mvccpb :as mvccpb]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn MemberAdd
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Cluster"
              :method  "MemberAdd"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-MemberAddRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->MemberAddResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn MemberRemove
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Cluster"
              :method  "MemberRemove"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-MemberRemoveRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->MemberRemoveResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn MemberUpdate
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Cluster"
              :method  "MemberUpdate"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-MemberUpdateRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->MemberUpdateResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn MemberList
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "etcdserverpb.Cluster"
              :method  "MemberList"
              :input   {:f etcd3-clojure.lib.etcdserverpb/new-MemberListRequest :ch input}
              :output  {:f etcd3-clojure.lib.etcdserverpb/pb->MemberListResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

